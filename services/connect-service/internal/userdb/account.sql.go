// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account.sql

package userdb

import (
	"context"
)

const getActiveUsers = `-- name: GetActiveUsers :many
SELECT id, username, password, enabled
FROM public.account
WHERE enabled=TRUE
`

func (q *Queries) GetActiveUsers(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, getActiveUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Enabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password, enabled
FROM public.account
WHERE id=$1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Enabled,
	)
	return i, err
}

const getUserByUsermame = `-- name: GetUserByUsermame :one
SELECT id, username, password, enabled
FROM public.account
WHERE username=$1
`

func (q *Queries) GetUserByUsermame(ctx context.Context, username string) (Account, error) {
	row := q.db.QueryRow(ctx, getUserByUsermame, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Enabled,
	)
	return i, err
}
